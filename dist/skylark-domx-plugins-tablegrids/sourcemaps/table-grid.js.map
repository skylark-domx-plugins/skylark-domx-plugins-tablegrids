{"version":3,"sources":["table-grid.js"],"names":["define","langx","$","_defaultInitOptions","caption","captionTooltip","initRows","maxRowsAllowed","initData","columns","i18n","idPrefix","rowDragging","hideButtons","hideRowNumColumn","rowButtonsInFront","rowCountName","buttonClasses","sectionClasses","customGridButtons","customRowButtons","customFooterButtons","useSubPanel","maintainScroll","maxBodyHeight","autoColumnWidth","_defaultCallbackContainer","nameFormatter","dataLoaded","rowDataLoaded","afterRowAppended","afterRowInserted","afterRowSwapped","beforeRowRemove","afterRowRemoved","afterRowDragged","subPanelBuilder","subPanelGetter","maxNumRowsReached","_defaultColumnOptions","type","name","value","display","displayCss","displayTooltip","headerSpan","cellCss","ctrlAttr","ctrlProp","ctrlCss","ctrlClass","ctrlOptions","uiOption","uiTooltip","resizable","invisible","emptyCriteria","customBuilder","customGetter","customSetter","onClick","onChange","_systemMessages","noColumnInfo","elemNotTable","notInit","getValueMultiGrid","notSupportMethod","_defaultTextResources","append","removeLast","insert","remove","moveUp","moveDown","rowDrag","rowEmpty","_defaultButtonClasses","_defaultSectionClasses","header","body","subPanel","footer","_defaultHideButtons","_methods","init","options","this","length","isArray","alert","tbWrap","tbHead","tbBody","tbFoot","tbColGp","tbRow","tbCell","tbWhole","isEmpty","tagName","tbHeadCellRowNum","tbHeadCellRowButton","settings","extend","_uniqueIndex","_rowOrder","_isDataLoaded","_visibleCount","_finalColSpan","_hideLastColumn","_wrapperId","_calculateWidth","isPlainObject","_i18n","_buttonClasses","_sectionClasses","id","Date","getTime","document","createElement","className","attr","addClass","insertAfter","empty","appendTo","prependTo","wrap","css","appendChild","pendingSkipCol","z","columnOpt","isFunction","text","insertBefore","firstChild","childnodes","colSpan","button","createGridButton","title","click","evt","insertRow","preventDefault","removeRow","y","buttonCfg","uiButton","atTheFront","prepend","makeCustomBottomButton","style","data","loadData","appendGrid","showEmptyMessage","calculateColumnWidth","width","isReady","checkGridAndGetSettings","isDataLoaded","load","records","emptyGrid","appendRow","numOfRowOrRowArray","rowIndex","callerUniqueIndex","isNumeric","insertResult","sortSequence","insertUniqueIndex","addedRows","focus","uniqueIndex","target","moveUpRow","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","getElementsByTagName","findRowIndex","getElementById","removeChild","html","saveSetting","removeClass","blur","moveDownRow","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","push","getCtrlValue","setCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","grid","noMsg","ctrl","parentIndex","hidden","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","numOfRow","height","scrollParent","scrollTop","splice","childNodes","rowSpan","ctrlName","ctrlId","lastGroupName","lastGroupElem","x","group","label","option","val","Option","arrayOpt","split","eqIndex","indexOf","substring","selectmenu","textAlign","search","err","datepicker","spinner","autocomplete","prop","caller","callback","change","tabindex","rowUniqueIndex","makeCustomRowButton","scroll","scrollHeight","offsetHeight","newHeight","exButton","btnClass","btnCss","btnAttr","rowData","force","pop","lastChild","skipWidthCalculation","$emptyCell","startIndex","isInit","r","c","join","suffix","adtData","newData","key","columnName","checked","element","param","uiIcon","genButton","nodeType","clone","icon","currentValue","defaultValue","$tbWhole","$scroller","tbHeadRow","tbBodyRow","marginThreshold","fn","modal","colLimit","Math","min","headCellWidth","clientWidth","bodyCellWidth","offsetWidth","params","apply","Array","prototype","call","arguments"],"mappings":"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","file":"../table-grid.js","sourcesContent":["define([\r\n    \"skylark-langx\",\r\n    \"skylark-domx/query\"\r\n],function(langx,$) {\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n    var _methods = {\r\n        init: function (options) {\r\n            var target = this;\r\n            if (target.length > 0) {\r\n                // Check mandatory paramters included\r\n                if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                    alert(_systemMessages.noColumnInfo);\r\n                    return target;\r\n                }\r\n                // Check target element is table or not\r\n                var tbWhole = target[0], tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n                if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                    alert(_systemMessages.elemNotTable);\r\n                    return target;\r\n                }\r\n                // Generate settings\r\n                var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n                // Add internal settings\r\n                langx.extend(settings, {\r\n                    // The UniqueIndex accumulate counter\r\n                    _uniqueIndex: 0,\r\n                    // The row order array\r\n                    _rowOrder: [],\r\n                    // Indicate data is loaded or not\r\n                    _isDataLoaded: false,\r\n                    // Visible column count for internal calculation\r\n                    _visibleCount: 0,\r\n                    // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                    _finalColSpan: 0,\r\n                    // Indicate to hide last column or not\r\n                    _hideLastColumn: false,\r\n                    // The element ID of the `appendGrid` wrapper\r\n                    _wrapperId: null,\r\n                    // \r\n                    _calculateWidth: true\r\n                });\r\n                // Labels or messages used in grid\r\n                if (langx.isPlainObject(options.i18n))\r\n                    settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n                else\r\n                    settings._i18n = langx.extend({}, _defaultTextResources);\r\n                // The extra class names for buttons\r\n                if (langx.isPlainObject(options.buttonClasses))\r\n                    settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n                else\r\n                    settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n                // The extra class names for sections\r\n                if (langx.isPlainObject(options.sectionClasses))\r\n                    settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n                else\r\n                    settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n                // Make sure the `hideButtons` setting defined\r\n                if (langx.isPlainObject(options.hideButtons))\r\n                    settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n                else\r\n                    settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n                // Check `idPrefix` is defined\r\n                if (isEmpty(settings.idPrefix)) {\r\n                    // Check table ID defined\r\n                    if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                        // Generate an ID using current time\r\n                        settings.idPrefix = 'ag' + new Date().getTime();\r\n                    }\r\n                    else {\r\n                        settings.idPrefix = tbWhole.id;\r\n                    }\r\n                }\r\n                // Check custom grid button parameters\r\n                if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                    settings.customGridButtons = {};\r\n                }\r\n                // Check rowDragging and useSubPanel option\r\n                if (settings.useSubPanel && settings.rowDragging) {\r\n                    settings.rowDragging = false;\r\n                }\r\n                // Create thead and tbody\r\n                tbHead = document.createElement('thead');\r\n                tbHead.className = 'ui-widget-header';\r\n                tbBody = document.createElement('tbody');\r\n                tbBody.className = 'ui-widget-content';\r\n                tbFoot = document.createElement('tfoot');\r\n                tbFoot.className = 'ui-widget-header';\r\n                tbColGp = document.createElement('colgroup');\r\n                // Prepare the table element\r\n                settings._wrapperId = settings.idPrefix + '-wrapper';\r\n                tbWrap = document.createElement('div');\r\n                $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n                $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n                // Check if content scrolling is enabled\r\n                if (settings.maxBodyHeight > 0) {\r\n                    // Seperate the thead and tfoot from source table\r\n                    $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                    $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                    $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n                } else {\r\n                    // Add thead, tbody and tfoot to the same table\r\n                    $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n                }\r\n                // Handle header row\r\n                var tbHeadCellRowNum, tbHeadCellRowButton;\r\n                tbHead.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings._sectionClasses.header) {\r\n                    tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n                } else {\r\n                    tbRow.className = 'columnHead';\r\n                }\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                    tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                    // Add column group for scrolling\r\n                    tbColGp.appendChild(document.createElement('col'));\r\n                }\r\n                // Prepare column information and add column header\r\n                var pendingSkipCol = 0;\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    // Assign default setting\r\n                    var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                    settings.columns[z] = columnOpt;\r\n                    // Skip hidden\r\n                    if (settings.columns[z].type != 'hidden') {\r\n                        // Check column is invisible\r\n                        if (!settings.columns[z].invisible) {\r\n                            settings._visibleCount++;\r\n                        }\r\n                        // Check skip header colSpan\r\n                        if (pendingSkipCol == 0) {\r\n                            var className = 'ui-widget-header';\r\n                            if (settings.columns[z].invisible) className += ' invisible';\r\n                            if (settings.columns[z].resizable) className += ' resizable';\r\n                            tbRow.appendChild(tbCell = document.createElement('td'));\r\n                            tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                            tbCell.className = className;\r\n                            if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                            if (settings.columns[z].headerSpan > 1) {\r\n                                $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                                pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                            }\r\n                            // Add tooltip\r\n                            if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                                ///$(tbCell).tooltip(settings.columns[z].displayTooltip); //TODO:lwf\r\n                            }\r\n                            else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                                ///$(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();//TODO:lwf\r\n                                $(tbCell).attr('title', settings.columns[z].displayTooltip);\r\n                            }\r\n                            // Check to set display text or generate by function\r\n                            if (langx.isFunction(settings.columns[z].display)) {\r\n                                settings.columns[z].display(tbCell);\r\n                            } else if (!isEmpty(settings.columns[z].display)) {\r\n                                $(tbCell).text(settings.columns[z].display);\r\n                            }\r\n                            // Add column group for scrolling\r\n                            tbColGp.appendChild(document.createElement('col'));\r\n                        } else {\r\n                            pendingSkipCol--;\r\n                        }\r\n                    }\r\n                }\r\n                // Enable columns resizable\r\n                /*\r\n                if (!isEmpty(jQuery.ui.resizable)) {\r\n                    ///$('td.resizable', tbHead).resizable({ handles: 'e' }); //TODO:lwf\r\n                }\r\n                */\r\n                // Check to hide last column or not\r\n                if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                        && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                        && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                    settings._hideLastColumn = true;\r\n                }\r\n                // Calculate the `_finalColSpan` value\r\n                settings._finalColSpan = settings._visibleCount;\r\n                if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n                if (!settings._hideLastColumn) settings._finalColSpan++;\r\n                // Generate last column header if needed\r\n                if (!settings._hideLastColumn) {\r\n                    if (settings.rowButtonsInFront) {\r\n                        if (settings.hideRowNumColumn) {\r\n                            // Insert a cell at the front\r\n                            tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                        } else {\r\n                            // Span the first cell that across row number and row button cells\r\n                            // tbHeadCellRowNum.colSpan = 2;\r\n                            // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                            // Insert a cell as the second column\r\n                            tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                        }\r\n                    } else {\r\n                        tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                    }\r\n                    tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                    tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                    // Add column group for scrolling\r\n                    tbColGp.appendChild(document.createElement('col'));\r\n                }\r\n                // Add caption when defined\r\n                if (settings.caption) {\r\n                    tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                    if (settings._sectionClasses.caption) {\r\n                        tbRow.className = settings._sectionClasses.caption;\r\n                    }\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_caption_td';\r\n                    tbCell.className = 'ui-state-active caption';\r\n                    tbCell.colSpan = settings._finalColSpan;\r\n                    // Add tooltip\r\n                    if (langx.isPlainObject(settings.captionTooltip)) {\r\n                        ///$(tbCell).tooltip(settings.captionTooltip); //TODO:lwf\r\n                    } else if (!isEmpty(settings.captionTooltip)) {\r\n                        ///$(tbCell).attr('title', settings.captionTooltip).tooltip(); //TODO:lwf\r\n                        $(tbCell).attr('title', settings.captionTooltip);\r\n                    }\r\n                    // Check to set display text or generate by function\r\n                    if (langx.isFunction(settings.caption)) {\r\n                        settings.caption(tbCell);\r\n                    } else {\r\n                        $(tbCell).text(settings.caption);\r\n                    }\r\n                }\r\n                // Handle footer row\r\n                tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings._sectionClasses.footer) {\r\n                    tbRow.className = settings._sectionClasses.footer;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_footer_td';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                $('<input/>').attr({\r\n                    type: 'hidden',\r\n                    id: settings.idPrefix + '_rowOrder',\r\n                    name: settings.idPrefix + '_rowOrder'\r\n                }).appendTo(tbCell);\r\n                // Make row invisible if all buttons are hidden\r\n                if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                        && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                    tbRow.style.display = 'none';\r\n                } else {\r\n                    if (!settings.hideButtons.append) {\r\n                        var button = createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n\t\t\t\t\t\t.attr({ title: settings._i18n.append }).addClass('append')\r\n                        .click(function (evt) {\r\n                            insertRow(tbWhole, 1, null, null);\r\n                            if (evt && evt.preventDefault) evt.preventDefault();\r\n                            return false;\r\n                        }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                    }\r\n                    if (!settings.hideButtons.removeLast) {\r\n                        var button = createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n\t\t\t\t\t\t.attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    removeRow(tbWhole, null, this.value, false);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                    }\r\n                    if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customFooterButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                            var buttonCfg = settings.customFooterButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Enable dragging\r\n                if (settings.rowDragging) {\r\n                    /* ///TODO:lwf\r\n                    $(tbBody).sortable({\r\n                        axis: 'y',\r\n                        containment: tbWhole,\r\n                        handle: '.rowDrag',\r\n                        helper: function (e, tr) {\r\n                            var org = tr.children();\r\n                            var helper = tr.clone();\r\n                            // Fix the cell width of cloned table cell\r\n                            helper.children().each(function (index) {\r\n                                $(this).width(org.eq(index).width());\r\n                                // Set the value of drop down list when drag (Issue #18)\r\n                                var helperSelect = $('select', this);\r\n                                if (helperSelect.length > 0) {\r\n                                    for (var y = 0; y < helperSelect.length; y++) {\r\n                                        var orgSelect = org.eq(index).find('select');\r\n                                        if (orgSelect.length > y) {\r\n                                            helperSelect[y].value = orgSelect[y].value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                            return helper;\r\n                        },\r\n                        update: function (event, ui) {\r\n                            var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                            var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                            gridRowDragged(tbWhole, ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                        }\r\n                    });\r\n                    */\r\n                }\r\n                // Save options\r\n                $(tbWhole).data('appendGrid', settings);\r\n                if (langx.isArray(options.initData)) {\r\n                    // Load data if initData is array\r\n                    loadData(tbWhole, options.initData, true);\r\n                } else {\r\n                    // Add empty rows\r\n                    $(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                }\r\n                // Show no rows in grid\r\n                if (settings._rowOrder.length == 0) {\r\n                    showEmptyMessage(tbWrap, settings, true);\r\n                }\r\n                // Calculate column width\r\n                if (settings.maxBodyHeight > 0) {\r\n                    if (settings.autoColumnWidth) {\r\n                        calculateColumnWidth(tbWrap);\r\n                    } else {\r\n                        $('table.foot', tbWrap).width($(tbWhole).width());\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = checkGridAndGetSettings(this, true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n        load: function (records) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    loadData(target[0], records, false);\r\n                } else {\r\n                    emptyGrid(target[0]);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.appendGrid('insertRow', numOfRowOrRowArray);\r\n        },\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = insertRow(tbWhole, numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        sortSequence(tbWhole, insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                removeRow(this[0], rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                emptyGrid(this[0]);\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    saveSetting(tbWhole, settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    saveSetting(tbWhole, settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    saveSetting(tbWhole, settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    saveSetting(tbWhole, settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = checkGridAndGetSettings(this), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = checkGridAndGetSettings(this), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        removeRow(tbWhole, null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n    function checkGridAndGetSettings(grid, noMsg) {\r\n        // Check the jQuery grid object is initialized and return its settings\r\n        var settings = null;\r\n        if (grid.length == 1) {\r\n            settings = grid.data('appendGrid');\r\n            if (!settings && !noMsg) {\r\n                alert(_systemMessages.notInit);\r\n            }\r\n        } else if (!noMsg) {\r\n            alert(_systemMessages.getValueMultiGrid);\r\n        }\r\n        return settings;\r\n    }\r\n    function insertRow(tbWhole, numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n        // Define variables\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n        var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n        var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n        var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n        var oldHeight = 0, oldScroll = 0;\r\n        if (settings.maxBodyHeight > 0) {\r\n            tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n        }\r\n        // Check number of row to be inserted\r\n        var numOfRow = numOfRowOrRowArray, loadData = false;\r\n        if (langx.isArray(numOfRowOrRowArray)) {\r\n            numOfRow = numOfRowOrRowArray.length;\r\n            loadData = true;\r\n        }\r\n        // Check parent row\r\n        if (langx.isNumeric(callerUniqueIndex)) {\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                    rowIndex = z;\r\n                    if (z != 0) parentIndex = z - 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (langx.isNumeric(rowIndex)) {\r\n            if (rowIndex >= settings._rowOrder.length) {\r\n                rowIndex = null;\r\n            } else {\r\n                parentIndex = rowIndex - 1;\r\n            }\r\n        }\r\n        else if (settings._rowOrder.length != 0) {\r\n            rowIndex = null;\r\n            parentIndex = settings._rowOrder.length - 1;\r\n        }\r\n        // Store old grid height\r\n        if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n            oldHeight = $(tbWhole).height();\r\n            oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n        }\r\n        // Remove empty row\r\n        if (settings._rowOrder.length == 0) {\r\n            $('tr.empty', tbWhole).remove();\r\n            calColWidth = true;\r\n        }\r\n        // Add total number of row\r\n        for (var z = 0; z < numOfRow; z++) {\r\n            // Check maximum number of rows\r\n            if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                reachMaxRow = true;\r\n                break;\r\n            }\r\n            // Update variables\r\n            settings._uniqueIndex++;\r\n            uniqueIndex = settings._uniqueIndex;\r\n            hidden.length = 0;\r\n            // Check row insert index\r\n            if (langx.isNumeric(rowIndex)) {\r\n                settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                } else {\r\n                    tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                }\r\n                addedRows.push(rowIndex);\r\n            }\r\n            else {\r\n                settings._rowOrder.push(uniqueIndex);\r\n                tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings.useSubPanel) {\r\n                    tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                }\r\n                addedRows.push(settings._rowOrder.length - 1);\r\n            }\r\n            tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n            if (settings._sectionClasses.body) {\r\n                tbRow.className = settings._sectionClasses.body;\r\n            }\r\n            $(tbRow).data('appendGrid', uniqueIndex);\r\n            // Config on the sub panel row\r\n            if (tbSubRow != null) {\r\n                tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                if (settings._sectionClasses.subPanel) {\r\n                    tbSubRow.className = settings._sectionClasses.subPanel;\r\n                }\r\n            }\r\n            // Add row number\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n            }\r\n            // Process on each columns\r\n            for (var y = 0; y < settings.columns.length; y++) {\r\n                // Skip hidden\r\n                if (settings.columns[y].type == 'hidden') {\r\n                    hidden.push(y);\r\n                    continue;\r\n                }\r\n                // Check column invisble\r\n                var className = 'ui-widget-content';\r\n                if (settings.columns[y].invisible) className += ' invisible';\r\n                // Insert cell\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                tbCell.className = className;\r\n                if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                // Prepare control id and name\r\n                var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                if (langx.isFunction(settings.nameFormatter)) {\r\n                    ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                } else {\r\n                    ctrlName = ctrlId;\r\n                }\r\n                // Check control type\r\n                ctrl = null;\r\n                if (settings.columns[y].type == 'custom') {\r\n                    if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                        ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    }\r\n                } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                    ctrl = document.createElement('select');\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    // Build option list\r\n                    if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                        // For array type option list\r\n                        if (settings.columns[y].ctrlOptions.length > 0) {\r\n                            if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                // Check to generate optGroup or not\r\n                                var lastGroupName = null, lastGroupElem = null;\r\n                                for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                    if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                        if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                            lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                            lastGroupElem = document.createElement('optgroup');\r\n                                            lastGroupElem.label = lastGroupName;\r\n                                            ctrl.appendChild(lastGroupElem);\r\n                                        }\r\n                                    } else {\r\n                                        lastGroupElem = null;\r\n                                    }\r\n                                    var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                    if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                        option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                    }\r\n                                    if (null == lastGroupElem) {\r\n                                        option.appendTo(ctrl);\r\n                                    }\r\n                                    else {\r\n                                        option.appendTo(lastGroupElem);\r\n                                    }\r\n                                    // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                        // For plain object type option list\r\n                        for (var x in settings.columns[y].ctrlOptions) {\r\n                            ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                        }\r\n                    } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                        // For string type option list\r\n                        var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                        for (var x = 0; x < arrayOpt.length; x++) {\r\n                            var eqIndex = arrayOpt[x].indexOf(':');\r\n                            if (-1 == eqIndex) {\r\n                                ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                            } else {\r\n                                ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                            }\r\n                        }\r\n                    } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                        settings.columns[y].ctrlOptions(ctrl);\r\n                    }\r\n                    tbCell.appendChild(ctrl);\r\n                    // Handle UI widget\r\n                    if (settings.columns[y].type == 'ui-selectmenu') {\r\n                        $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                    }\r\n                }\r\n                else if (settings.columns[y].type == 'checkbox') {\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.type = 'checkbox';\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    ctrl.value = 1;\r\n                    tbCell.appendChild(ctrl);\r\n                    tbCell.style.textAlign = 'center';\r\n                }\r\n                else if (settings.columns[y].type == 'textarea') {\r\n                    ctrl = document.createElement('textarea');\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                    ctrl = document.createElement('input');\r\n                    try {\r\n                        ctrl.type = settings.columns[y].type;\r\n                    }\r\n                    catch (err) { /* Not supported type */ }\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                else {\r\n                    // Generate text input\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.type = 'text';\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                    // Handle UI widget\r\n                    if (settings.columns[y].type == 'ui-datepicker') {\r\n                        $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                    } else if (settings.columns[y].type == 'ui-spinner') {\r\n                        $(ctrl).spinner(settings.columns[y].uiOption);\r\n                    } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                        $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                    }\r\n                }\r\n                // Add extra control properties\r\n                if (settings.columns[y].type != 'custom') {\r\n                    // Add control attributes as needed\r\n                    if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                    // Add control properties as needed\r\n                    if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                    // Add control CSS as needed\r\n                    if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                    // Add control class as needed\r\n                    if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                    // Add jQuery UI tooltip as needed\r\n                    ///if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip); //TODO:lwf\r\n                    // Add control events as needed\r\n                    if (langx.isFunction(settings.columns[y].onClick)) {\r\n                        $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                            evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                        });\r\n                    }\r\n                    if (langx.isFunction(settings.columns[y].onChange)) {\r\n                        $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                            evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                        });\r\n                    }\r\n                }\r\n                if (loadData) {\r\n                    // Load data if needed\r\n                    setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                } else if (!isEmpty(settings.columns[y].value)) {\r\n                    // Set default value\r\n                    setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                }\r\n            }\r\n            // Add button cell if needed\r\n            if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                if (!settings.rowButtonsInFront) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                } else if (!settings.hideRowNumColumn) {\r\n                    tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                } else {\r\n                    tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                }\r\n                tbCell.className = 'ui-widget-content last';\r\n                tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                // Add standard buttons\r\n                if (!settings.hideButtons.insert) {\r\n                    var button = createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('insertRow', 1, null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                }\r\n                if (!settings.hideButtons.remove) {\r\n                    var button = createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                        .click(function (evt) {\r\n                            var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                            removeRow(tbWhole, null, rowUniqueIndex, false);\r\n                            if (evt && evt.preventDefault) evt.preventDefault();\r\n                            return false;\r\n                        }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                }\r\n                if (!settings.hideButtons.moveUp) {\r\n                    var button = createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('moveUpRow', null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                }\r\n                if (!settings.hideButtons.moveDown) {\r\n                    var button = createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('moveDownRow', null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                }\r\n                // Handle row dragging\r\n                if (settings.rowDragging) {\r\n                    var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                        .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                        .appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                }\r\n                // Add hidden\r\n                for (var y = 0; y < hidden.length; y++) {\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrl.name = ctrl.id;\r\n                    }\r\n                    ctrl.type = 'hidden';\r\n\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                    } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                        // Set default value\r\n                        ctrl.value = settings.columns[hidden[y]].value;\r\n                    }\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                // Add extra buttons\r\n                if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customRowButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                        var buttonCfg = settings.customRowButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Create sub panel\r\n            if (settings.useSubPanel) {\r\n                tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.className = 'ui-widget-content';\r\n                tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                if (langx.isFunction(settings.subPanelBuilder)) {\r\n                    settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                }\r\n            }\r\n        }\r\n        // Check if re-calculate column width is required\r\n        if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n            var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n            if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                calColWidth = true;\r\n                settings._calculateWidth = false;\r\n            }\r\n        }\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n        // Calculate column width\r\n        if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n            calculateColumnWidth(document.getElementById(settings._wrapperId));\r\n        }\r\n        // Trigger events\r\n        if (langx.isNumeric(rowIndex)) {\r\n            if (langx.isFunction(settings.afterRowInserted)) {\r\n                settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n            }\r\n        }\r\n        else {\r\n            if (langx.isFunction(settings.afterRowAppended)) {\r\n                settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n            }\r\n        }\r\n        if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n            settings.maxNumRowsReached();\r\n        }\r\n        // Scroll the page when append row\r\n        if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n            // Try to maintain the height so that user no need to scroll every time when row added\r\n            var newHeight = $(tbWhole).height();\r\n            $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n        }\r\n        // Return added rows' uniqueIndex\r\n        return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n    }\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        ///.button(buttonCfg.uiButton) //TODO:lwf\r\n        .click({ tbWhole: tbWhole }, buttonCfg.click); \r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        ///.button(buttonCfg.uiButton)//TODO:lwf\r\n        .click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).appendGrid('getRowValue', null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function removeRow(tbWhole, rowIndex, uniqueIndex, force) {\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n        if (langx.isNumeric(uniqueIndex)) {\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    rowIndex = z;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (langx.isNumeric(rowIndex)) {\r\n            // Remove middle row\r\n            if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                settings._rowOrder.splice(rowIndex, 1);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                } else {\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                }\r\n                // Save setting\r\n                saveSetting(tbWhole, settings);\r\n                // Sort sequence\r\n                sortSequence(tbWhole, rowIndex);\r\n                // Trigger event\r\n                if (langx.isFunction(settings.afterRowRemoved)) {\r\n                    settings.afterRowRemoved(tbWhole, rowIndex);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Store old window scroll value\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maintainScroll) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove last row\r\n            if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                uniqueIndex = settings._rowOrder.pop();\r\n                tbBody.removeChild(tbBody.lastChild);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                }\r\n                // Save setting\r\n                saveSetting(tbWhole, settings);\r\n                // Trigger event\r\n                if (langx.isFunction(settings.afterRowRemoved)) {\r\n                    settings.afterRowRemoved(tbWhole, null);\r\n                }\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n        }\r\n        // Add empty row\r\n        if (settings._rowOrder.length == 0) {\r\n            showEmptyMessage(document.getElementById(settings._wrapperId), settings);\r\n        }\r\n    }\r\n    function showEmptyMessage(tbWrap, settings, skipWidthCalculation) {\r\n        var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n        $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n        if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n            // Check scrolling enabled\r\n            if (settings.autoColumnWidth) {\r\n                calculateColumnWidth(tbWrap);\r\n            } else {\r\n                // Set the width of empty message cell to the thead width\r\n                $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n            }\r\n        }\r\n    }\r\n    function emptyGrid(tbWhole) {\r\n        // Load settings\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        // Remove rows\r\n        $('tbody', tbWhole).empty();\r\n        settings._rowOrder.length = 0;\r\n        settings._uniqueIndex = 0;\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n        // Add empty row\r\n        showEmptyMessage(document.getElementById(settings._wrapperId), settings);\r\n    }\r\n    function sortSequence(tbWhole, startIndex) {\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        if (!settings.hideRowNumColumn) {\r\n            for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n            }\r\n        }\r\n    }\r\n    function loadData(tbWhole, records, isInit) {\r\n        var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        if (settings) {\r\n            // Clear existing content\r\n            tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            $(tbBody).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Check any records\r\n            if (records != null && records.length) {\r\n                // Add rows\r\n                insertResult = insertRow(tbWhole, records.length, null, null);\r\n                // Set data\r\n                for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                    for (var c = 0; c < settings.columns.length; c++) {\r\n                        setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                    }\r\n                    if (langx.isFunction(settings.rowDataLoaded)) {\r\n                        settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                    }\r\n                }\r\n            }\r\n            // Save setting\r\n            settings._isDataLoaded = true;\r\n            if (isInit) settings.initData = null;\r\n            $(tbWhole).data('appendGrid', settings);\r\n            // Trigger data loaded event\r\n            if (langx.isFunction(settings.dataLoaded)) {\r\n                settings.dataLoaded(tbWhole, records);\r\n            }\r\n        }\r\n    }\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function saveSetting(tbWhole, settings) {\r\n        $(tbWhole).data('appendGrid', settings);\r\n        $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n    function gridRowDragged(tbWhole, isMoveUp, uniqueIndex, tbRowIndex) {\r\n        // Get setting\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        // Find the start sorting index\r\n        var startIndex = -1;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                if (isMoveUp) {\r\n                    startIndex = tbRowIndex;\r\n                    settings._rowOrder.splice(z, 1);\r\n                    settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                } else {\r\n                    startIndex = z;\r\n                    settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                    settings._rowOrder.splice(z, 1);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Do re-order\r\n        sortSequence(tbWhole, startIndex);\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n\r\n        // Trigger event\r\n        if (langx.isFunction(settings.afterRowDragged)) {\r\n            settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n        }\r\n    }\r\n    function createGridButton(param, uiIcon) {\r\n        // Generate the standard grid action button based on its parameter.\r\n        var genButton = null;\r\n        if (param) {\r\n            if (langx.isFunction(param)) {\r\n                // Generate button if it is a function.\r\n                genButton = $(param());\r\n            } else if (param.nodeType) {\r\n                // Clone the button if it is a DOM element.\r\n                genButton = $(param).clone();\r\n            } else if (param.icon || param.label) {\r\n                // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                ///genButton = $('<button/>').attr({ type: 'button' }).button(param);//TODO:lwf\r\n                genButton = $('<button/>').attr({ type: 'button' });//TODO:lwf\r\n            }\r\n        }\r\n        if (!genButton) {\r\n            // Use default setting (jQuery UI Button) if button is not created.\r\n            ///genButton = $('<button/>').attr({ type: 'button' }).button({ icon: uiIcon, showLabel: false });//TODO:lwf\r\n            genButton = $('<button/>').attr({ type: 'button' });\r\n        }\r\n        return genButton;\r\n    }\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function calculateColumnWidth(tbWrap) {\r\n        var $tbWhole = $('table.body', tbWrap);\r\n        var $scroller = $('div.scroller', tbWrap);\r\n        var settings = $tbWhole.data('appendGrid');\r\n        var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n        var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n        // Check any rows within the grid\r\n        if (settings._rowOrder.length > 0) {\r\n            // Reset the table/column width\r\n            $('td', tbHeadRow).width('auto');\r\n            $('col', tbColGp).width('auto');\r\n            $tbWhole.width('auto');\r\n            $scroller.width('auto');\r\n            // Check the total number of columns\r\n            var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n            var marginThreshold = -2;\r\n            if ($.fn.modal) {\r\n                // If bootstrap is loaded, cell margin was reset\r\n                marginThreshold = 1;\r\n            }\r\n            var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n            for (var z = 0; z < colLimit; z++) {\r\n                var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                if (bodyCellWidth > headCellWidth) {\r\n                    tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                } else {\r\n                    tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                }\r\n            }\r\n        } else {\r\n            $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n        }\r\n        // Set the width of footer row\r\n        $('table.foot', tbWrap).width($tbWhole.width());\r\n        // Check the scroll panel width\r\n        $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n    }\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n});\r\n"]}